<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>相似图片技术调研</title>
      <link href="/2021/06/28/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94/"/>
      <url>/2021/06/28/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<p>最近研究相似图片的方案调研</p><span id="more"></span><p><img src="https://i.loli.net/2021/06/28/NwQljgyZUIKVD96.png" alt="相似图片-技术路线图.png"></p><p>大纲</p><p><img src="https://i.loli.net/2021/06/28/VfonLwdjr3FkRD7.png" alt="相似图片-技术路线图-大纲.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git fork 上游仓库</title>
      <link href="/2020/06/08/Git-fork-%E4%B8%8A%E6%B8%B8%E4%BB%93%E5%BA%93/"/>
      <url>/2020/06/08/Git-fork-%E4%B8%8A%E6%B8%B8%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>GitHub上fork项目后怎么跟上游仓库保持更新。</p><span id="more"></span><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在GitHub(<del>大型同性交友网站</del>)上我们可以找到大量有趣、有用的Repository,有的时候我们会使用fork工能,但是有时候你想让fork下的仓库跟上游仓库保持更新，那么就需要一些操作。</p><h4 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h4><h5 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h5><p>   首先<code>cd</code>到项目目录<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v # 您的fork的当前配置的远程仓库。</span><br></pre></td></tr></table></figure><br>   如下图所示，即没有设置上游仓库<br>   <img src="https://i.loli.net/2020/06/08/aNLuqkFnpeK3lyR.png" alt="remote -v.png"></p><h5 id="设置上游仓库"><a href="#设置上游仓库" class="headerlink" title="设置上游仓库"></a>设置上游仓库</h5>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream # https.gitxxx  指定上游仓库</span><br></pre></td></tr></table></figure><p>   重复1步骤查看仓库状态<br>   结果如下<br>   <img src="https://i.loli.net/2020/06/08/GUqIVoDbAzmrPJN.png" alt="remote add upstream.png"></p><h5 id="抓取上游跟新到本地"><a href="#抓取上游跟新到本地" class="headerlink" title="抓取上游跟新到本地"></a>抓取上游跟新到本地</h5>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream # 抓取上游仓库的更新到本地</span><br></pre></td></tr></table></figure><h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><p>   列出分支列表<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch # 列出当前有多少分支  按q退出编辑模式</span><br></pre></td></tr></table></figure><br>   切换分支<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master # 切换到 master 主分支</span><br></pre></td></tr></table></figure></p><h5 id="合并上游更新"><a href="#合并上游更新" class="headerlink" title="合并上游更新"></a>合并上游更新</h5>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge upstream/master # 合并上游更新</span><br></pre></td></tr></table></figure><h5 id="推送合并后的更新"><a href="#推送合并后的更新" class="headerlink" title="推送合并后的更新"></a>推送合并后的更新</h5>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master # 推送合并后的更新</span><br></pre></td></tr></table></figure><h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4><hr><blockquote><p>ps </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># Git 常用命令集</span><br><span class="line">git clone git://github.com/limbopro/Script.git # 检出仓库</span><br><span class="line">git remote -v # 查看远程仓库 刚刚已经用过了 </span><br><span class="line">git remote add [name] [url] # 添加远程仓库 刚刚已经用过了 </span><br><span class="line">git remote rm [name] # 删除远程仓库</span><br><span class="line">git remote set-url --push [name] [newUrl] # 修改远程仓库</span><br><span class="line">git pull [remoteName] [localBranchName] # 拉取远程仓库 与fetch 有所区别 </span><br><span class="line">git push [remoteName] [localBranchName] # 推送远程仓库</span><br><span class="line"></span><br><span class="line">git branch # 查看本地分支 一般默认为 master </span><br><span class="line">git branch -r # 查看远程分支</span><br><span class="line">git branch [name] # 创建本地分支 注意新分支创建后不会自动切换为当前分支 </span><br><span class="line">git checkout [name] # 切换分支</span><br><span class="line">git checkout -b [name] # 创建新分支并立即切换到新分支</span><br><span class="line">git branch -d [name] # 删除分支 -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</span><br><span class="line">git merge [name] # 合并分支 将名称为[name]的分支与当前分支合并</span><br><span class="line"></span><br><span class="line">git status # 查看当前状态 同步上游仓库更新时会常用到</span><br><span class="line">git commit # 提交 合并更新后，提交到远程仓库会用到</span><br><span class="line">git branch -a # 查看所有的分支</span><br><span class="line">git branch -r # 查看远程所有分支</span><br><span class="line"></span><br><span class="line"># 查看、添加、提交、删除、找回，重置修改文件</span><br><span class="line">git help &lt;command&gt; # 显示command的help</span><br><span class="line">git show # 显示某次提交的内容 git show $id</span><br><span class="line">git co -- &lt;file&gt; # 抛弃工作区修改</span><br><span class="line">git co . # 抛弃工作区修改</span><br><span class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span><br><span class="line">git add . # 将所有修改过的工作文件提交暂存区</span><br><span class="line">git rm &lt;file&gt; # 从版本库中删除文件</span><br><span class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span><br><span class="line">git reset -- . # 从暂存区恢复到工作文件</span><br><span class="line">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line">git ci --amend # 修改最后一次提交记录</span><br><span class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="line">git revert HEAD # 恢复最后一次提交的状态</span><br><span class="line"># 查看文件diff</span><br><span class="line">git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff</span><br><span class="line">git diff &lt;id1&gt; &lt;id2&gt; # 比较两次提交之间的差异</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> git </tag>
            
            <tag> fork </tag>
            
            <tag> upstream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quantumult X 体验</title>
      <link href="/2020/06/08/Quantumult-X-%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/06/08/Quantumult-X-%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d4f4a8aaa45a39c8409b6af035c3df6347d0089f45f4bbc5134671fec8f82e42"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试加密</title>
      <link href="/2019/10/17/%E6%B5%8B%E8%AF%95%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/10/17/%E6%B5%8B%E8%AF%95%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4dcbd8ccb5e53310cfb512b3d7e3a538aa2aa0dfda4bea75a4362b9da47774ea">90b802059200f1da98db072b6ecfd0773b1fb566e0ac1faf0e3621a337f25a9fe9c82d4561f8b58cc252f47d136d3d694d18f24c8edc401f3bfadcc1c05c6b241e9d1cb44f849629dfffed67687a633a1af75e475909bbf7796f85b4bd2e7d370d3fd867a527993e39ca8995662d67178eed94a5618cde16c4d0b0c2e796edc0e81d7f9f83489d9ea2313f739b23b9bae8b35740f427e5b954962c17adfd7183b7743071ddf132f827e3ff6909832fa66529e8af72e3d2eb01c518f703c9c964d0725e77d1d894430415ab6276e4b2541a47ef31aed49d40a6ffbe84f352b164ffd8763e4689e2226813a1ac8836c161860e8f85e99248e8444e17fad84ccb9de4855e285266c3e28577ee57c824625175fe2cf85e9113f10f0f6e8821d466ecc2d50d3856498e3e7acc26d923e2053d30721eef9ca7c26952a84b8d033336791244d1d8c40663aa886a29bb8ee0256cb468d38c091aa84daedad2c8d81ac87920ef781b13e7b3da3deced071a0151939a3ba9a28037d28b023efff41ede5be8918de3dfe4f2c38e09b819214185849750cd5b395e945082e83dc30ce643ef8f0a6a3f4faca10c374c8aedeb2b520397c485cb2bd1727b6931b175b2f2a91fc3efd7368282e7b5fdde42b08bcaa99520</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">You must enter the password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Xcode编译相关</title>
      <link href="/2019/09/27/Xcode%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/09/27/Xcode%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>有时候Xcode编译很慢……</p><span id="more"></span><h3 id="查看编译时间"><a href="#查看编译时间" class="headerlink" title="查看编译时间"></a>查看编译时间</h3><p>Terminal 输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dt.Xcode ShowBuildOperationDuration YES</span><br></pre></td></tr></table></figure><p>ps:需重启Xcode<br>如下<br><img src="https://i.loli.net/2019/12/09/vrozlcCqZRLtXy9.png" width="100%" height="100%"></p><h3 id="po打印出的对象为空"><a href="#po打印出的对象为空" class="headerlink" title="po打印出的对象为空"></a><code>po</code>打印出的对象为空</h3><h4 id="主target"><a href="#主target" class="headerlink" title="主target"></a>主target</h4><p>有的时候在LLDB试用<code>po</code>命令时可能会出现错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error: warning: couldn’t get cmd pointer (xxx NULL): extracting data from value failed </span><br><span class="line">Couldn’t materialize: couldn’t get the value of variable now: no location, value may have been optimized out </span><br><span class="line">Errored out in Execute, couldn’t PrepareToExecuteJITExpression</span><br></pre></td></tr></table></figure><p>原因是编译选项选择的是快速+优化。<br>相关内容是Xcode中Optimization Level的设置。</p><p>一共有七种选项:</p><ul><li>None[-O0]: 不优化。在这种设置下， 编译器的目标是降低编译消耗，保证调试时输出期望的结果。程序的语句之间是独立的：如果在程序的停在某一行的断点出，我们可以给任何变量赋新值抑或是将程序计数器指向方法中的任何一个语句，并且能得到一个和源码完全一致的运行结果。</li><li>Fast[-O1]: 大函数所需的编译时间和内存消耗都会稍微增加。在这种设置下，编译器会尝试减小代码文件的大小，减少执行时间，但并不执行需要大量编译时间的优化。在苹果的编译器中，在优化过程中，严格别名，块重排和块间的调度都会被默认禁止掉。</li><li>Faster[-O2]: 编译器执行所有不涉及时间空间交换的所有的支持的优化选项。在这种设置下，编译器不会进行循环展开、函数内联或寄存器重命名。和‘Fast[-O1]’项相比，此设置会增加编译时间和生成代码的性能。</li><li>Fastest[-O3]: 在开启‘Fast[-O1]’项支持的所有优化项的同时，开启函数内联和寄存器重命名选项。这个设置有可能会导致二进制文件变大。</li><li>Fastest, Smallest[-Os]: 优化大小。这个设置开启了‘Fast[-O1]’项中的所有不增加代码大小的优化选项，并会进一步的执行可以减小代码大小的优化。</li><li>Fastest, Aggressive Optimizations[-Ofast]: 这个设置开启了“Fastest[-O3]”中的所有优化选项，同时也开启了可能会打破严格编译标准的积极优化，但并不会影响运行良好的代码。</li><li>Smallest, Aggressive Size Optimizations [-Oz]: 与相似-Os，但会进一步减小代码大小，并且可能需要更长的时间才能运行。</li></ul><p>那么想要详细信息就需要改为第一种。<br><img src="https://i.loli.net/2019/12/09/I5YaLAiWFloVJBj.jpg" width="100%" height="100%"></p><h4 id="pod里的Optimization-Level"><a href="#pod里的Optimization-Level" class="headerlink" title="pod里的Optimization Level"></a>pod里的Optimization Level</h4><p>我们在使用pod的时候，每一个pod其实都是一个target，它有自己的Optimization Level。cocoapods默认给每一个pod的Optimization Level设置的是Fastest, Smallest，也就是说执行所有的优化和减少内存占用空间。</p><p>这样我们在开发的时候会有两个问题：一个是debug的时候无法输出pod源码里面的变量值，因为编译器已经给代码做了优化，它无法再记录你的变量值了。</p><p>把所有pod的的Optimization Level设置为None只需在Podfile里加入以下代码即可（其中的”Dev”为你项目的Scheme）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post_install do |installer|</span><br><span class="line">  installer.pods_project.build_configurations.each do |config|</span><br><span class="line">    if config.name.include?(&quot;Dev&quot;)</span><br><span class="line">      config.build_settings[&#x27;GCC_OPTIMIZATION_LEVEL&#x27;] = &#x27;0&#x27;</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="设置Xcode编译的线程数"><a href="#设置Xcode编译的线程数" class="headerlink" title="设置Xcode编译的线程数"></a>设置Xcode编译的线程数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaults write xcodebuild PBXNumberOfParallelBuildSubtasks 8</span><br><span class="line">defaults write xcodebuild IDEBuildOperationMaxNumberOfConcurrentCompileTasks 8</span><br><span class="line">defaults write com.apple.xcode PBXNumberOfParallelBuildSubtasks 8</span><br><span class="line">defaults write com.apple.xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks 8</span><br></pre></td></tr></table></figure><p>Xcode默认使用与CPU核数相同的线程来进行编译，但由于编译过程中的IO操作往往比CPU运算要多，因此适当的提升线程数可以在一定程度上加快编译速度。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Charles使用总结</title>
      <link href="/2019/09/02/Charles%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/02/Charles%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>mac上使用Charles抓包的使用总结</p><span id="more"></span><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>软件长这样⬇️<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rtffrhnfj308209eabu.jpg" width="20%" height="100%"><br>别名青花瓷(花瓶?)……</p><hr><p>笔者使用的是汉化版(英语渣……)⬇️<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rtg1spvpj310o0goww5.jpg" width="100%" height="100%"></p><p>首页如下⬇️</p><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rtgieovjj31g40u0ad7.jpg" alt="image.png"></p><hr><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>好了开始进入正题。<br>现在大部分应用都已经启用https请求了，那么就略过http抓包吧。</p><h5 id="设置根证书"><a href="#设置根证书" class="headerlink" title="设置根证书"></a>设置根证书</h5><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rth6ylm2j30sm0gwdup.jpg" alt="image.png"><br>点击帮助-&gt;SSL设置-&gt;安装Charles Root证书<br>安装后选择证书，双击，修改为 <code>始终信任</code><br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rthn3lmtj30u012ltks.jpg" alt="image.png"></p><h5 id="Charles设置代理"><a href="#Charles设置代理" class="headerlink" title="Charles设置代理"></a>Charles设置代理</h5><p>其实默认的设置就可以。<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rti5yc5nj30ww0s2aca.jpg" alt="image.png"></p><h5 id="设置iOS手机证书"><a href="#设置iOS手机证书" class="headerlink" title="设置iOS手机证书"></a>设置iOS手机证书</h5><p>手机与mac连接同一个wifi后，修改代理，设置为mac电脑。<br>之后打开<code>chls.pro/ssl</code>安装证书。<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rtijzdtnj30yg074mzg.jpg" alt="image.png"><br>安装之后需要在 设置-&gt;通用-&gt;关于手机-&gt;证书信任设置 中信任证书。</p><h5 id="设置代理，开始抓包"><a href="#设置代理，开始抓包" class="headerlink" title="设置代理，开始抓包"></a>设置代理，开始抓包</h5><p>之后可以开是抓包了，但是，还是看不到数据。这是因为需要进行SSL设置。<br>在Charles 代理-&gt;SSL代理设置 中添加想要抓包的数据的域名。类似<code>example.com:443</code>。<br>也可以直接设置<code>*:*</code>。表示抓取全部数据。<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rtixq6f0j30ww0noq56.jpg" alt="image.png"></p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>之后配合之前分享过的<a href="https://rensss.github.io/2019/08/02/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%E7%AF%87/#%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7-Paw">Paw</a>请求工具，就可以愉快的玩耍了！</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> Mac </tag>
            
            <tag> iPhone </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技巧总结篇</title>
      <link href="/2019/08/02/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%E7%AF%87/"/>
      <url>/2019/08/02/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>开发中可能会遇到的各种技巧。。。</p><span id="more"></span><h2 id="Xcode部分"><a href="#Xcode部分" class="headerlink" title="Xcode部分"></a>Xcode部分</h2><h3 id="Organzier-用户上传的的崩溃日志"><a href="#Organzier-用户上传的的崩溃日志" class="headerlink" title="Organzier 用户上传的的崩溃日志"></a>Organzier 用户上传的的崩溃日志</h3><p>用户上传崩溃日志，可以在Xcode的Organzier里面查看。<br>Xcode-&gt;Windows-&gt;Organizer<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rszghv5xj30jy0i6gze.jpg" width="50%" height="50%"><br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rsxgge61j31ie0u0gxi.jpg" alt="crush.png"><br>优点是很详细，很方便。但是，并非所有用户都会上传崩溃信息。所以这个只能作为其他崩溃统计信息的补充。不能当做主力来源。sad。。。</p><h3 id="断点调试Autolayout"><a href="#断点调试Autolayout" class="headerlink" title="断点调试Autolayout"></a>断点调试Autolayout</h3><p>有时候可能会遇到这样的自动布局bug</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-08</span><span class="number">-09</span> <span class="number">15</span>:<span class="number">29</span>:<span class="number">39.111289</span>+<span class="number">0800</span> FastClean[<span class="number">18148</span>:<span class="number">888972</span>] [LayoutConstraints] Unable to simultaneously satisfy constraints.</span><br><span class="line">Probably at least one of the constraints in the following <span class="built_in">list</span> is one you don<span class="number">&#x27;</span>t want. </span><br><span class="line">Try <span class="keyword">this</span>: </span><br><span class="line">(<span class="number">1</span>) look at each constraint <span class="keyword">and</span> <span class="keyword">try</span> to figure out which you don<span class="number">&#x27;</span>t expect; </span><br><span class="line">(<span class="number">2</span>) find the code that added the unwanted constraint <span class="keyword">or</span> constraints <span class="keyword">and</span> fix it. </span><br><span class="line">(</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x60000263a850 H:|-(15)-[UIButton:0x7fd6d5f366f0](LTR)   (active, names: &#x27;|&#x27;:UIView:0x7fd6d5f36030 )&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x60000263a620 UIButton:0x7fd6d5f366f0.right == UIView:0x7fd6d5f36030.right - 15   (active)&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x600002647e80 &#x27;UIView-Encapsulated-Layout-Width&#x27; UIView:0x7fd6d5f36030.width == 0   (active)&gt;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Will attempt to recover by breaking constraint </span><br><span class="line">&lt;NSLayoutConstraint:<span class="number">0x60000263a620</span> UIButton:<span class="number">0x7fd6d5f366f0</span>.right == UIView:<span class="number">0x7fd6d5f36030</span>.right - <span class="number">15</span>   (active)&gt;</span><br><span class="line"></span><br><span class="line">Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to <span class="keyword">catch</span> <span class="keyword">this</span> in the debugger.</span><br><span class="line">The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in &lt;UIKitCore/UIView.h&gt; may also be helpful.</span><br></pre></td></tr></table></figure><p>那么你可以添加一种布局短点，在布局出现问题时可以添加<code>Symbolic breakpoint</code>断点。<br>内容填为<code>UIViewAlertForUnsatisfiableConstraints</code>。<br>如下：<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rt0frh4jj30qg0amqhn.jpg" width="100%" height="30%"><br>然而并没有什么卵用，直接断到线程堆栈上。啥有用的信息都没有…………</p><p>那么应该怎么搞呢，这里有个小技巧。在上面那个断点中添加<code>action</code><br><code>po [[UIWindow keyWindow] _autolayoutTrace]</code><br>如下图：<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rt11vubij30qy0d2nfy.jpg" width="100%" height="30%" /></p><p>会得到类似下图的view层次结构:</p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rt1e2szqj30u00xmaqs.jpg" width="100%" height="100%" /><p>还是不够直接啊…  那么你可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) e id $myView = (id) 0x7fd6d5d239e0</span><br><span class="line">(lldb) e (void)[$myView setBackgroundColor:[UIColor blackColor]]</span><br></pre></td></tr></table></figure><p>那么该元素就会被着色，你就可以看到它了！</p><h2 id="iPhone部分"><a href="#iPhone部分" class="headerlink" title="iPhone部分"></a>iPhone部分</h2><p><a href="https://rensss.github.io/2019/09/02/Charles%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/">Charles使用技巧</a></p><h2 id="Mac软件部分"><a href="#Mac软件部分" class="headerlink" title="Mac软件部分"></a>Mac软件部分</h2><h3 id="接口调试工具-Paw"><a href="#接口调试工具-Paw" class="headerlink" title="接口调试工具 Paw"></a>接口调试工具 Paw</h3><p>长这个样子⬇️<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rt6xebbnj30c60bmjs9.jpg" width="30%" height="30%" /><br>这是一个调试接口用的工具，可以很方便的调试网络请求。</p><p>详情如下⬇️<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rt83vz9wj30yg0osq80.jpg" width="100%" height="100%"></p><p>返回结果解析<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rt8id95ij30u01ev7tz.jpg" width="100%" height="100%"></p><h3 id="Application-Loader"><a href="#Application-Loader" class="headerlink" title="Application Loader"></a>Application Loader</h3><p>上传APP<br>Xcode 11把Application Loader去掉了，使用上很不方便，下面是官方提供的命令:<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g7rscpm1i4j31680u07ap.jpg" width="100%" height="100%"></p><p>或者像我这样懒的，从Xcode10里面把 Application Loader 抽取出来，hhh<br>放上下载连接(蓝奏云):<br><a href="https://www.lanzous.com/i6ns6ad"><strong>下载</strong></a> 密码:f7qy</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> Mac </tag>
            
            <tag> iPhone </tag>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2018/05/12/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/05/12/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Markdown 常用语法</p><span id="more"></span><h1 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h1><h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h2 id="1-制作一份待办事宜"><a href="#1-制作一份待办事宜" class="headerlink" title="1. 制作一份待办事宜"></a>1. 制作一份待办事宜</h2><ul><li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input checked="" disabled="" type="checkbox"> 新增 Todo 列表功能</li><li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能</li></ul><h2 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h2><p>$$E=mc^2$$</p><h2 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-高效绘制"><a href="#4-高效绘制" class="headerlink" title="4. 高效绘制"></a>4. 高效绘制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h2 id="5-高效绘制"><a href="#5-高效绘制" class="headerlink" title="5. 高效绘制"></a>5. 高效绘制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h2 id="6-高效绘制"><a href="#6-高效绘制" class="headerlink" title="6. 高效绘制"></a>6. 高效绘制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h2 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h2><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h2 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h2><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。</p><p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p><blockquote><p>ps:<br>参考链接  <a href="https://www.zybuluo.com/mdeditor#439859">作业部落</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地图片加载卡顿</title>
      <link href="/2018/05/12/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%8D%A1%E9%A1%BF/"/>
      <url>/2018/05/12/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%8D%A1%E9%A1%BF/</url>
      
        <content type="html"><![CDATA[<p>当列表中加载太多的高清大图后,流畅度就会大大降低,本文将试图改善这一问题.</p><span id="more"></span><p>#本地大图加载卡顿</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在项目<a href="https://github.com/rensss/iphone_webServer">iphone_webServer</a>中,网页上传众多大图后,每个图片的显示,占用诸多内存,导致卡顿.</p><blockquote><p>   e.g.<br>   以一张尺寸为900 × 600的图片为例，图片共有像素数：<br>   900 × 600 = 540,000像素(Pixel)。<br>   如果图片是RGB 色彩模式，占用的内存是：<br>   900 × 600 × 3 = 1,620,000 字节(bytes).<br>   后面”× 3”表示每个像素内RGB 颜色的信息需要3字节，也是24比特(bit)。 <br>   也可以说每个像素中 3 RGB值，每一个RGB值需要一个 8 比特，也是一个字节，总计24个比特。</p></blockquote><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>本地文件读取后,生成小图片加载到UIImageView上</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 小图宽高</span><br><span class="line">CGFloat height = self.height;</span><br><span class="line">CGFloat width = img.size.width * height / img.size.height;</span><br><span class="line"></span><br><span class="line">// 生成小图片</span><br><span class="line">CGSize newSize = CGSizeMake(width, height);</span><br><span class="line">UIGraphicsBeginImageContextWithOptions(newSize, NO, 0.0);</span><br><span class="line">[img drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];</span><br><span class="line">UIImage *smallImg = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">UIGraphicsEndImageContext();</span><br></pre></td></tr></table></figure><h2 id="Over"><a href="#Over" class="headerlink" title="Over"></a>Over</h2>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIImageView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2017/10/23/%E6%8E%92%E5%BA%8F/"/>
      <url>/2017/10/23/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>iOS 中的几种排序方法.</p><span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    NSArray *data = [NSArray arrayWithObjects:</span><br><span class="line">                     @&quot;12&quot;,@&quot;4&quot;,@&quot;3&quot;,@&quot;10&quot;,@&quot;25&quot;,</span><br><span class="line">                     @&quot;17&quot;,@&quot;22&quot;,@&quot;44&quot;,@&quot;1&quot;,@&quot;18&quot;,</span><br><span class="line">                     @&quot;35&quot;,@&quot;11&quot;,@&quot;21&quot;,@&quot;16&quot;,@&quot;34&quot;,</span><br><span class="line">                     @&quot;63&quot;,@&quot;102&quot;,@&quot;65&quot;,@&quot;37&quot;,@&quot;97&quot;, nil];</span><br><span class="line"></span><br><span class="line">    NSArray *resaultArr;</span><br><span class="line">    // 计算代码运行时间</span><br><span class="line">    CFAbsoluteTime startTime = CFAbsoluteTimeGetCurrent();</span><br><span class="line">    resaultArr = [self bubbleSort:data];</span><br><span class="line">    CFAbsoluteTime linkTime = (CFAbsoluteTimeGetCurrent() - startTime);</span><br><span class="line">    NSLog(@&quot;冒泡排序 Linked in %f ms&quot;, linkTime * 1000.0);</span><br><span class="line">//    NSLog(@&quot;%@&quot;,resaultArr);</span><br><span class="line">    </span><br><span class="line">    startTime = CFAbsoluteTimeGetCurrent();</span><br><span class="line">    resaultArr = [self selectSort:data];</span><br><span class="line">    linkTime = (CFAbsoluteTimeGetCurrent() - startTime);</span><br><span class="line">    NSLog(@&quot;选择排序 Linked in %f ms&quot;, linkTime * 1000.0);</span><br><span class="line">//    NSLog(@&quot;%@&quot;,resaultArr);</span><br><span class="line">    </span><br><span class="line">    startTime = CFAbsoluteTimeGetCurrent();</span><br><span class="line">    resaultArr = [self hillSort:data];</span><br><span class="line">    linkTime = (CFAbsoluteTimeGetCurrent() - startTime);</span><br><span class="line">    NSLog(@&quot;希尔排序 Linked in %f ms&quot;, linkTime * 1000.0);</span><br><span class="line">//    NSLog(@&quot;%@&quot;,resaultArr);</span><br><span class="line">    </span><br><span class="line">    startTime = CFAbsoluteTimeGetCurrent();</span><br><span class="line">    resaultArr = [self quicksort:data];</span><br><span class="line">    linkTime = (CFAbsoluteTimeGetCurrent() - startTime);</span><br><span class="line">    NSLog(@&quot;快速排序 Linked in %f ms&quot;, linkTime * 1000.0);</span><br><span class="line">//    NSLog(@&quot;%@&quot;,resaultArr);</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 冒泡排序</span><br><span class="line"></span><br><span class="line"> @param dataSourceArr 数据源</span><br><span class="line"> @return 有序数据</span><br><span class="line"> */</span><br><span class="line">- (NSArray *)bubbleSort:(NSArray *)dataSourceArr &#123;</span><br><span class="line">        </span><br><span class="line">    NSMutableArray *currentArray = dataSourceArr.mutableCopy;</span><br><span class="line">    NSInteger count = dataSourceArr.count;</span><br><span class="line">    //外循环控制  多少轮</span><br><span class="line">    for (NSInteger i = 0; i &lt; count; i++) &#123;</span><br><span class="line">        //内循环比较  j元素 跟 j+1 比较 相邻的元素</span><br><span class="line">        for (NSInteger j = 0; j &lt; count - 1 - i; j++) &#123;</span><br><span class="line">            if ([currentArray[j] integerValue] &gt; [currentArray[j + 1] integerValue]) &#123;</span><br><span class="line">                NSObject *temp = currentArray[j + 1];</span><br><span class="line">                currentArray[j + 1] = currentArray[j];</span><br><span class="line">                currentArray[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return currentArray.copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 选择排序</span><br><span class="line"></span><br><span class="line"> @param dataSourceArr 数据源</span><br><span class="line"> @return 有序数据</span><br><span class="line"> */</span><br><span class="line">- (NSArray *)selectSort:(NSArray *)dataSourceArr &#123;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *currentArray = dataSourceArr.mutableCopy;</span><br><span class="line">    NSInteger count = dataSourceArr.count;</span><br><span class="line">    //外层控制轮数 需要比较多少轮</span><br><span class="line">    for (NSInteger i = 0; i &lt; count; i++) &#123;</span><br><span class="line">        //每轮跟其它元素比较 选出最大的 交换</span><br><span class="line">        for (NSInteger j = i + 1; j &lt; count; j++) &#123;</span><br><span class="line">            if ([currentArray[i] integerValue] &gt; [currentArray[j] integerValue]) &#123;</span><br><span class="line">                NSObject *temp = currentArray[j];</span><br><span class="line">                currentArray[j] = currentArray[i];</span><br><span class="line">                currentArray[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return currentArray.copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>示意图</p><p><img src="https://raw.githubusercontent.com/rensss/Sort/master/source/hillSort.gif" alt="Sorting_shellsort_anim.gif"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 希尔排序</span><br><span class="line"></span><br><span class="line"> @param dataSourceArr 数据源</span><br><span class="line"> @return 有序数组</span><br><span class="line"> */</span><br><span class="line">- (NSArray *)hillSort:(NSArray *)dataSourceArr &#123;</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     步长的选择是希尔排序的重要部分。只要最终步长为1任何步长序列都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。</span><br><span class="line">     </span><br><span class="line">     已知的最好步长序列是由Sedgewick提出的(1, 5, 19, 41, 109,...)，该序列的项来自 &#123;\displaystyle 9\times 4^&#123;i&#125;-9\times 2^&#123;i&#125;+1&#125; 9\times 4^&#123;i&#125;-9\times 2^&#123;i&#125;+1和 &#123;\displaystyle 2^&#123;i+2&#125;\times (2^&#123;i+2&#125;-3)+1&#125; 2^&#123;&#123;i+2&#125;&#125;\times (2^&#123;&#123;i+2&#125;&#125;-3)+1这两个算式。这项研究也表明“比较在希尔排序中是最主要的操作，而不是交换。”用这样步长序列的希尔排序比插入排序要快，甚至在小数组中比快速排序和堆排序还快，但是在涉及大量数据时希尔排序还是比快速排序慢。</span><br><span class="line">     另一个在大数组中表现优异的步长序列是（斐波那契数列除去0和1将剩余的数以黄金分区比的两倍的幂进行运算得到的数列）：(1, 9, 34, 182, 836, 4025, 19001, 90358, 428481, 2034035, 9651787, 45806244, 217378076, 1031612713,…)</span><br><span class="line">     */</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *currentArray = dataSourceArr.mutableCopy;</span><br><span class="line">    NSInteger gap = currentArray.count / 2;</span><br><span class="line">    NSInteger i,j;</span><br><span class="line">    </span><br><span class="line">    while (gap &gt;= 1) &#123;</span><br><span class="line">        </span><br><span class="line">        for (i = gap; i &lt; currentArray.count; i ++) &#123;</span><br><span class="line">            NSString *temp = currentArray[i];</span><br><span class="line">            </span><br><span class="line">            for (j = i - gap; j &gt;= 0 &amp;&amp; [currentArray[j] integerValue] &gt; [temp integerValue]; j -= gap)</span><br><span class="line">                currentArray[j + gap] = currentArray[j];</span><br><span class="line">            </span><br><span class="line">            currentArray[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        gap = gap / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return currentArray.copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>示意图<br><img src="https://raw.githubusercontent.com/rensss/Sort/master/source/quickSort.gif" alt="quickSort"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 快速排序</span><br><span class="line"> </span><br><span class="line"> @param dataSourceArr 数据源</span><br><span class="line"> @return 有序数据</span><br><span class="line"> */</span><br><span class="line">- (NSArray *)quicksort:(NSArray *)dataSourceArr &#123;</span><br><span class="line"></span><br><span class="line">NSMutableArray *currentArray = dataSourceArr.mutableCopy;</span><br><span class="line">    NSInteger i,j,key;</span><br><span class="line">    for (i = 1; i &lt; [currentArray count]; i++) &#123;</span><br><span class="line">            key = [currentArray[i] integerValue];</span><br><span class="line">            j = i-1;</span><br><span class="line">            while ((j &gt;= 0) &amp;&amp; ([currentArray[j] integerValue] &gt; key)) &#123;</span><br><span class="line">                    currentArray[j+1] = currentArray[j];</span><br><span class="line">                    j--;</span><br><span class="line">            &#125;</span><br><span class="line">            currentArray[j+1] = @(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return currentArray.copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数用时"><a href="#函数用时" class="headerlink" title="函数用时"></a>函数用时</h3><p><img src="https://raw.githubusercontent.com/rensss/Sort/master/source/result.png" alt="排序结果.png"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>希尔排序比冒泡排序和选择排序要快很多! 快排果然快！🤣</p><hr><blockquote><p> <a href="https://github.com/rensss/Sort">DEMO</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传自己的轮子-CocoaPods(续)</title>
      <link href="/2017/10/10/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AE%E5%AD%90-CocoaPods-%E7%BB%AD/"/>
      <url>/2017/10/10/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AE%E5%AD%90-CocoaPods-%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<p>上次我们上传了自己的轮子,这次我们就更新提交一下 这个轮子!</p><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>更新代码到github</li><li>修改.podspec文件</li><li>上传到CocoaPods</li></ol><h3 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h3><ol><li><h4 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h4><ol><li><h5 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h5>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br><span class="line"></span><br><span class="line">git commit -m &quot;update tag 0.0.2&quot;</span><br><span class="line"></span><br><span class="line">git push origin -u master</span><br></pre></td></tr></table></figure><p>   <img src="http://upload-images.jianshu.io/upload_images/847229-3cd2e55001af4f40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git add.png"></p></li><li><h5 id="打tag"><a href="#打tag" class="headerlink" title="打tag"></a>打tag</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag 0.0.2</span><br><span class="line"></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>​<img src="http://upload-images.jianshu.io/upload_images/847229-d0ca8e36cce4f858.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git tag.png"></p></li></ol></li><li><h4 id="修改-podspec文件"><a href="#修改-podspec文件" class="headerlink" title="修改.podspec文件"></a>修改.podspec文件</h4><p>修改关键数据<code>s.version</code>和<code>s.source</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.version = &quot;0.0.2&quot;</span><br><span class="line"></span><br><span class="line">s.source = &#123; :git =&gt; &quot;https://github.com/rensss/R_category.git&quot;, :tag =&gt; &quot;0.0.2&quot; &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push R_category.podspec --allow-warnings</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/847229-60e63fb924e1fb17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pod trunk push.png"></p></li></ol><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>搞定收工</p><blockquote><p>上篇<a href="https://rensss.github.io/2017/09/27/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AE%E5%AD%90-CocoaPods/">上传自己的轮子_CocoaPods</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传自己的轮子_CocoaPods</title>
      <link href="/2017/09/27/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AE%E5%AD%90-CocoaPods/"/>
      <url>/2017/09/27/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AE%E5%AD%90-CocoaPods/</url>
      
        <content type="html"><![CDATA[<p>自己造轮子,上传到CocoaPods</p><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>造轮子(创建自己的项目) , github 新建 repository , clone 到本地(我的<a href="https://rensss.github.io/R_category/">轮子</a>)</li><li>注册trunk,验证</li><li>创建.podspec文件 , 编辑 , 验证</li><li>发布trunk</li></ol><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><h4 id="造轮子-github-新建项目-网上教程很多-这里就不再赘述了"><a href="#造轮子-github-新建项目-网上教程很多-这里就不再赘述了" class="headerlink" title="造轮子 github 新建项目(网上教程很多,这里就不再赘述了)"></a>造轮子 github 新建项目(网上教程很多,这里就不再赘述了)</h4></li><li><h5 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h5><p><img src="http://upload-images.jianshu.io/upload_images/847229-d7e8cf0b245fcb08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建新的项目.png"></p></li><li><h5 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone #本地目录</span><br></pre></td></tr></table></figure></li><li><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd #进入工程文件 </span><br><span class="line">git add . </span><br><span class="line">git commit -m &#x27;0.0.1&#x27; </span><br><span class="line">git push origin master </span><br><span class="line">git tag 0.0.1 </span><br><span class="line">git push —tag</span><br></pre></td></tr></table></figure></li><li><h4 id="注册trunk"><a href="#注册trunk" class="headerlink" title="注册trunk"></a>注册trunk</h4><ul><li>注册 <code>pod trunk register renzzz@qq.com v587 —verbose</code></li><li>去邮箱复制链接到浏览器访问,就ok了</li><li>验证下<code>pod trunk me</code><br><img src="http://upload-images.jianshu.io/upload_images/847229-33861a5b115e7054.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pod trunk me.png"><blockquote><p><strong>ps:</strong><br>​Pods:下是已发布的轮子</p></blockquote></li></ul></li><li><h4 id="创建-podspec文件-编辑-验证"><a href="#创建-podspec文件-编辑-验证" class="headerlink" title="创建.podspec文件 , 编辑 , 验证"></a>创建.podspec文件 , 编辑 , 验证</h4><ol><li><h5 id="初始化pod-spec-create-项目名字"><a href="#初始化pod-spec-create-项目名字" class="headerlink" title="初始化pod spec create #项目名字"></a>初始化<code>pod spec create #项目名字</code></h5></li><li><h5 id="编辑-podspec文件"><a href="#编辑-podspec文件" class="headerlink" title="编辑.podspec文件"></a>编辑.podspec文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">#  Be sure to run &#x27;pod spec lint R_category.podspec&#x27; to ensure this </span><br><span class="line">#  is a valid spec and to remove all comments including this before </span><br><span class="line">#  submitting the spec.</span><br><span class="line">#  To learn more about Podspec attributes see </span><br><span class="line">#  http://docs.cocoapods.org/specification.html</span><br><span class="line">#  To see working Podspecs in the CocoaPods repo see</span><br><span class="line">#  https://github.com/CocoaPods/Specs/</span><br><span class="line">#</span><br><span class="line">#  一定要运行 &#x27;pod spec lint xx.podspec&#x27;来确保.podspec文件是有效的。</span><br><span class="line">#  并且最后在提交.podspec之前要移除所有注释.</span><br><span class="line">#  可以了解更过关于Podspec，通过http://docs.cocoapods.org/specification.html</span><br><span class="line">#  see https://github.com/CocoaPods/Specs/</span><br><span class="line"></span><br><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line"># ―――――――――――――――――  Spec Metadata ――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  These will help people to find your library, and whilst it</span><br><span class="line">#  can feel like a chore to fill in it&#x27;s definitely to your advantage.</span><br><span class="line">#  The</span><br><span class="line">#  summary should be tweet-length, and the description more in depth.</span><br><span class="line"># </span><br><span class="line"># ―――――――――――――――――  Spec 元数据  ――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  这些将帮助人们找到你的库，同时在成为你的优势之前可能感觉是麻烦的。</span><br><span class="line">#  概要的长度限制与推特的一样（140），并且这个描述更加深入</span><br><span class="line">#  s.summary最好不要与s.description一样，会报警告(多写两字不会死)</span><br><span class="line"></span><br><span class="line">  s.name         = &quot;R_category&quot;</span><br><span class="line">  s.version      = &quot;0.0.1&quot;</span><br><span class="line">  s.summary      = &quot;A short description of R_category.&quot;</span><br><span class="line"></span><br><span class="line">#  This description is used to generate tags and improve search </span><br><span class="line">#  results.</span><br><span class="line">#  * Think: What does it do? Why did you write it? What is the focus?</span><br><span class="line">#  * Try to keep it short, snappy and to the point.</span><br><span class="line">#  * Write the description between the DESC delimiters below.</span><br><span class="line">#  * Finally, don&#x27;t worry about the indent, CocoaPods strips it!</span><br><span class="line">  </span><br><span class="line">#  这个描述用来生成标签和改善搜索结果</span><br><span class="line">#  思考:它做了什么？你为什么要写它？重点是什么？</span><br><span class="line">#  尽力保持它简短，精炼</span><br><span class="line">#  在DESC之间写这个描述</span><br><span class="line">#  最后不要担心缩进。cocoapods将做它。</span><br><span class="line">  </span><br><span class="line">  s.description  = &lt;&lt;-DESC</span><br><span class="line"> zheshiyigejiandandemiaoshu(这是一个简单的描述)</span><br><span class="line">  DESC</span><br><span class="line">               </span><br><span class="line">#  主页地址，直接填写我们的仓库地址即可</span><br><span class="line">  s.homepage     = &quot;http://EXAMPLE/R_category&quot;</span><br><span class="line">#  屏幕截图(不需要关心，直接删除即可)</span><br><span class="line">#  s.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;, </span><br><span class="line">#  &quot;www.example.com/screenshots_2.gif&quot;</span><br><span class="line"></span><br><span class="line"># ――――――――――――――――――  Spec License  ―――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  Licensing your code is important. See http://choosealicense.com for </span><br><span class="line">#  more info.</span><br><span class="line">#  CocoaPods will detect a license file if there is a named LICENSE*</span><br><span class="line">#  Popular ones are &#x27;MIT&#x27;, &#x27;BSD&#x27; and &#x27;Apache License, Version 2.0&#x27;.</span><br><span class="line">#</span><br><span class="line"># ―――――――――――――――――――  Spec 授权  ――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  授权你的代码是很重要的。查看http://choosealicense.com得到更多的信息</span><br><span class="line">#  CocoaPods 如果这里有一个命名为LICENSE*的文件，那么Cocoapods将检测这个授权文件</span><br><span class="line">#  主要的授权为:&#x27;MIT&#x27;, &#x27;BSD&#x27; and &#x27;Apache License, Version 2.0&#x27;</span><br><span class="line">  s.license      = &quot;MIT&quot;</span><br><span class="line">#  s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;FILE_LICENSE&quot; &#125;</span><br><span class="line"></span><br><span class="line"># ――――――――――――――――― Author Metadata ――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  Specify the authors of the library, with email addresses. Email </span><br><span class="line">#  addresses</span><br><span class="line">#  of the authors are extracted from the SCM log. E.g. $ git log.</span><br><span class="line">#  CocoaPods also</span><br><span class="line">#  accepts just a name if you&#x27;d rather not provide an email address.</span><br><span class="line">#</span><br><span class="line">#  Specify a social_media_url where others can refer to, for example a </span><br><span class="line">#  twitter</span><br><span class="line">#  profile URL.</span><br><span class="line">  </span><br><span class="line"># ――――――――――――――――― 作者 元数据  ―――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  指定这个库的作者和email地址。</span><br><span class="line">#  作者的email地址也可以通过 $ git log来提取。</span><br><span class="line">#  如果你不愿意提供邮箱，CocoaPods也接受仅仅一个名字</span><br><span class="line">#  指定一个别人可以访问的社交账号，例如推特</span><br><span class="line">#  s.social_media_url这一项最好不要指定了，因为推特国内无法访问，验证.podsec时，</span><br><span class="line">#  不通过。</span><br><span class="line"></span><br><span class="line">#  填写用户名以及自己的github邮箱</span><br><span class="line">  s.author             = &#123; &quot;lhjzzu&quot; =&gt; &quot;1822657131@qq.com&quot; &#125;</span><br><span class="line">#  Or just: s.author    = &quot;lhjzzu&quot;</span><br><span class="line">#  s.authors            = &#123; &quot;lhjzzu&quot; =&gt; &quot;1822657131@qq.com&quot; &#125;</span><br><span class="line">#  s.social_media_url   = &quot;http://twitter.com/lhjzzu&quot;</span><br><span class="line"></span><br><span class="line"># ――――――――――――――――――― Platform Specifics ――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  If this Pod runs only on iOS or OS X, then specify the platform and</span><br><span class="line">#  the deployment target. You can optionally include the target after </span><br><span class="line">#  the platform.</span><br><span class="line">  </span><br><span class="line"># ――――――――――――――――――― 平台的指定 ―――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  如果你的Pod仅仅运行在iOS或者OS X上，那么要指定platform以及deployment </span><br><span class="line">#  target。</span><br><span class="line">#  一般而言，我们直选择</span><br><span class="line">#  s.platform = :ios和s.ios.deployment_target = &quot;5.0&quot;</span><br><span class="line">#  s.platform     = :ios, &quot;5.0&quot;与上面两句话相等</span><br><span class="line">#  s.platform     = :ios</span><br><span class="line">  s.platform     = :ios, &quot;5.0&quot;</span><br><span class="line"></span><br><span class="line">#  When using multiple platforms</span><br><span class="line">#  s.ios.deployment_target = &quot;5.0&quot;</span><br><span class="line">#  s.osx.deployment_target = &quot;10.7&quot;</span><br><span class="line">#  s.watchos.deployment_target = &quot;2.0&quot;</span><br><span class="line">#  s.tvos.deployment_target = &quot;9.0&quot;</span><br><span class="line"></span><br><span class="line"># ――――――――――――――――― Source Location ―――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  Specify the location from where the source should be retrieved.</span><br><span class="line">#  Supports git, hg, bzr, svn and HTTP.</span><br><span class="line">#</span><br><span class="line">  </span><br><span class="line"># ――――――――――――――――――― 资源的位置 ――――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  指定将被拉取的资源的位置</span><br><span class="line">#  支持 git, hg, bzr, svn and HTTP.</span><br><span class="line">#  http://EXAMPLE/R_category.git 就是我们仓库的地址(一定不要忘了.git)</span><br><span class="line">#  tag =&gt; &quot;0.0.1&quot; 就是我们打的标签</span><br><span class="line">  </span><br><span class="line">  s.source       = &#123; :git =&gt; &quot;http://EXAMPLE/R_category.git&quot;, :tag =&gt; &quot;0.0.1&quot; &#125;</span><br><span class="line"># ――――――――――――――――― Source Code ――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  CocoaPods is smart about how it includes source code. For source </span><br><span class="line">#  files</span><br><span class="line">#  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</span><br><span class="line">#  For header files it will include any header in the folder.</span><br><span class="line">#  Not including the public_header_files will make all headers public.</span><br><span class="line">#</span><br><span class="line">  </span><br><span class="line"># ――――――――――――――――――― 源码 ――――――――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  对于怎样去包含源码，cocoapods是很聪明的。</span><br><span class="line">#  s.source_files将包含所有的源文件（swift, h, m, mm, c &amp; cpp）</span><br><span class="line">#  s.exclude_files要排除的文件（一般直接删除即可）</span><br><span class="line">#  s.public_header_files 指定我们想公开的头文件</span><br><span class="line">#  如果不含有s.public_header_files，那么我们的.h文件是默认全部公开的。</span><br><span class="line">  s.source_files  = &quot;R_category&quot;, &quot;R_category/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">#  s.exclude_files = &quot;Classes/Exclude&quot;</span><br><span class="line">#  s.public_header_files = &quot;Classes/**/*.h&quot;</span><br><span class="line"># ――――――――――――――――――― Resources ――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  A list of resources included with the Pod. These are copied into the</span><br><span class="line">#  target bundle with a build phase script. Anything else will be </span><br><span class="line">#  cleaned.</span><br><span class="line">#  You can preserve files from being cleaned, please don&#x27;t preserve</span><br><span class="line">#  non-essential files like tests, examples and documentation.</span><br><span class="line">#</span><br><span class="line"># ――――――――――――――――――― 资源 ―――――――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  这个Pod包含的一系列的资源。在编译脚本的阶段，它们被复制到这个目标bundle中。</span><br><span class="line">#  其它的任何资源将被清理。你可以保护文件免于被清理，但是请不要保存不必要的文件</span><br><span class="line">#  例如tests，examples，documentation</span><br><span class="line"></span><br><span class="line">#  s.resource  = &quot;icon.png&quot;</span><br><span class="line">#  s.resources = &quot;Resources/*.png&quot;</span><br><span class="line">#  s.preserve_paths = &quot;FilesToSave&quot;, &quot;MoreFilesToSave&quot;</span><br><span class="line"></span><br><span class="line"># ―――――――――――――――――― Project Linking ――――――――――――――――――――#</span><br><span class="line">#</span><br><span class="line">#  Link your library with frameworks, or libraries. Libraries do not </span><br><span class="line">#  include</span><br><span class="line">#  the lib prefix of their name.</span><br><span class="line">  </span><br><span class="line"># ――――――――――――――――――― 项目 链接 ―――――――――――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  链接你的Framework和library（系统的Framework，library）. </span><br><span class="line">#  librarys的指定不包含lib的前缀，例如libxml2.tbd</span><br><span class="line">  </span><br><span class="line">#  s.framework  = &quot;SomeFramework&quot;</span><br><span class="line">#  s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</span><br><span class="line"></span><br><span class="line">#  s.library   = &quot;iconv&quot;</span><br><span class="line">#  s.libraries = &quot;iconv&quot;, &quot;xml2&quot;</span><br><span class="line"> </span><br><span class="line"># ――――――――――――――――――― Project Settings ――――――――――――――――― #</span><br><span class="line">#</span><br><span class="line">#  If your library depends on compiler flags you can set them in the </span><br><span class="line">#  xcconfig hash</span><br><span class="line">#  where they will only apply to your library. If you depend on other </span><br><span class="line">#  Podspecs</span><br><span class="line">#  you can include multiple dependencies to ensure it works.</span><br><span class="line"></span><br><span class="line"># ――――――――――――――――――― 项目 设置 ――――――――――――――――――――――――― #</span><br><span class="line">#  如果你的library依赖一个compiler flags。你能设置他们在xcconfig，它们将应用于你</span><br><span class="line">#  的lib中。</span><br><span class="line">#  如果你的pods依赖其他的Podspecs，你能够包含多个依赖来确保它工作。</span><br><span class="line">#  s.requires_arc指定是否为ARC</span><br><span class="line">#  s.xcconfig做一些配置</span><br><span class="line">#  s.dependency指定依赖</span><br><span class="line">  </span><br><span class="line">#  s.requires_arc = true</span><br><span class="line">#  s.xcconfig = &#123; &quot;HEADER_SEARCH_PATHS&quot; =&gt; &quot;$(SDKROOT)/usr/include/libxml2&quot; &#125;</span><br><span class="line">#  s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><h5 id="最终的-podspec文件"><a href="#最终的-podspec文件" class="headerlink" title="最终的.podspec文件"></a>最终的.podspec文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">s.name         = &quot;R_category&quot;</span><br><span class="line">s.version      = &quot;0.0.1&quot;</span><br><span class="line">s.summary      = &quot;一个简单的分类扩展.&quot;</span><br><span class="line">s.description  = &lt;&lt;-DESC</span><br><span class="line">a simple demo</span><br><span class="line">DESC</span><br><span class="line">s.homepage     = &quot;https://github.com/rensss/R_category&quot;</span><br><span class="line">s.license      = &#x27;MIT&#x27;</span><br><span class="line">s.author       = &#123; &quot;v587&quot; =&gt; &quot;renzzz@qq.com&quot; &#125;</span><br><span class="line">s.platform     = :ios</span><br><span class="line">s.ios.deployment_target = &quot;5.0&quot;</span><br><span class="line"></span><br><span class="line">s.source       = &#123; :git =&gt; &quot;https://github.com/rensss/R_category.git&quot;, :tag =&gt; &quot;0.0.1&quot; &#125;</span><br><span class="line"></span><br><span class="line">s.source_files  = &quot;category_Class&quot;, &quot;category_Class/*.&#123;h,m&#125;&quot;</span><br><span class="line"># s.exclude_files = &quot;Classes/Exclude&quot;</span><br><span class="line"># s.public_header_files = &quot;Classes/**/*.h&quot;</span><br><span class="line"></span><br><span class="line">s.requires_arc = true</span><br><span class="line"># s.xcconfig = &#123; &quot;HEADER_SEARCH_PATHS&quot; =&gt; &quot;$(SDKROOT)/usr/include/libxml2&quot; &#125;</span><br><span class="line"># s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><h5 id="验证-podspec文件"><a href="#验证-podspec文件" class="headerlink" title="验证.podspec文件"></a>验证.podspec文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint R_category.podspec --verbose</span><br><span class="line">如果出现下面的信息，表示验证通过</span><br><span class="line">R_category.podspec passed validation. </span><br></pre></td></tr></table></figure><blockquote><p><strong>ps:</strong><br><code>--vebose</code>:打印细节，可以把执行过程中具体的信息打印出来<br><img src="http://upload-images.jianshu.io/upload_images/847229-005e8ae9de7a6ea0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pod spec lint.png"><br><code>--allow-warnings</code> 表示忽略警告 当有警告不通过时 添加此参数</p></blockquote></li></ol></li><li><h4 id="发布trunk"><a href="#发布trunk" class="headerlink" title="发布trunk"></a>发布trunk</h4><ol><li><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push R_category.podspec --verbose </span><br><span class="line">如果有下面的信息显示，表明push成功</span><br><span class="line">  - Data URL: xxxxxxxx</span><br><span class="line">  - Log messages:</span><br><span class="line">  - May 9th, 23:29: Push for &#x27;R_category 0.0.1&#x27; initiated.</span><br><span class="line">  - May 9th, 23:29: Push for &#x27;R_category 0.0.1&#x27; has been pushed  (3.41790716 s).</span><br></pre></td></tr></table></figure></li><li><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search R_category</span><br></pre></td></tr></table></figure><blockquote><p><strong>ps:</strong><br>​最好停一段时间再搜索<br>​请先更新本地pod库 <code>pod setup</code> 或者 <code>Pod repo update</code><br>​如果还是搜索不到,请删除search_index.json文件.在这个目录下<br><code>/Users/&lt;你的用户名&gt;/Library/Caches/CocoaPods/</code><br><img src="http://upload-images.jianshu.io/upload_images/847229-d80d586cdbdd833a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/840" alt="search_index_json.png"></p></blockquote></li></ol></li></ol><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>   报错时请不要慌张,不要放弃,你终将成功的!</p><blockquote><p>下篇<a href="https://rensss.github.io/2017/10/10/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AE%E5%AD%90-CocoaPods-%E7%BB%AD/">上传自己的轮子-CocoaPods(续)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PM2让hexo始终运行</title>
      <link href="/2017/08/09/%E4%BD%BF%E7%94%A8PM2%E8%AE%A9hexo%E5%A7%8B%E7%BB%88%E8%BF%90%E8%A1%8C/"/>
      <url>/2017/08/09/%E4%BD%BF%E7%94%A8PM2%E8%AE%A9hexo%E5%A7%8B%E7%BB%88%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在Mac下,编辑hexo以后每次都要 <code>hexo g</code> <code>hexo s</code> , 还要一直开着终端,特别烦人!<span id="more"></span><br>寻思着怎么让hexo一直后台运行,然后在网上找到了这个神器 <strong>pm2</strong><br><img src="https://i.loli.net/2021/06/29/cW3v8UgedBTuRQs.png" alt="pm2.png"></p><blockquote><p><em>PM2.JPG</em></p></blockquote><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>1.安装pm2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p>2.编辑脚本代码<br>    在hexo博客的根目录下新建<code>app.js</code>文件<br>    编写内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//run.js</span><br><span class="line">const &#123; exec &#125; = require(&#x27;child_process&#x27;)</span><br><span class="line">exec(&#x27;hexo s&#x27;,(error, stdout, stderr) =&gt; &#123;</span><br><span class="line">    if(error)&#123;</span><br><span class="line">         console.log(`exec error: $&#123;error&#125;`)</span><br><span class="line">         return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(`stdout: $&#123;stdout&#125;`);</span><br><span class="line">    console.log(`stderr: $&#123;stderr&#125;`);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>1.运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure><p>2.常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js -i 4           # 后台运行pm2，启动4个app.js </span><br><span class="line">                                # 也可以把&#x27;max&#x27; 参数传递给 start</span><br><span class="line">                                # 正确的进程数目依赖于Cpu的核心数目</span><br><span class="line">pm2 start app.js --name my-api  # 命名进程</span><br><span class="line">pm2 list                        # 显示所有进程状态</span><br><span class="line">pm2 monit                       # 监视所有进程</span><br><span class="line">pm2 logs                        # 显示所有进程日志</span><br><span class="line">pm2 stop all                    # 停止所有进程</span><br><span class="line">pm2 restart all                 # 重启所有进程</span><br><span class="line">pm2 reload all                  # 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class="line">pm2 stop 0                      # 停止指定的进程</span><br><span class="line">pm2 restart 0                   # 重启指定的进程</span><br><span class="line">pm2 startup                     # 产生 init 脚本 保持进程活着</span><br><span class="line">pm2 web                         # 运行健壮的 computer API endpoint</span><br><span class="line">                                # (http://localhost:9615)</span><br><span class="line">pm2 delete 0                    # 杀死指定的进程</span><br><span class="line">pm2 delete all                  # 杀死全部进程</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/29/1XWVGptqxOaB9cM.png" alt="pm2 list-2017-08-09-下午12.06.06.png"></p><blockquote><p><em>pm2 list</em></p></blockquote><h4 id="OVER"><a href="#OVER" class="headerlink" title="OVER"></a>OVER</h4>]]></content>
      
      
      <categories>
          
          <category> PM2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Hexo </tag>
            
            <tag> PM2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加简书图片测试</title>
      <link href="/2017/08/09/%E6%B7%BB%E5%8A%A0%E7%AE%80%E4%B9%A6%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2017/08/09/%E6%B7%BB%E5%8A%A0%E7%AE%80%E4%B9%A6%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h5 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h5><p>试试简书的图片链接<span id="more"></span><br><img src="http://upload-images.jianshu.io/upload_images/847229-ad4cf2d90ecc8d33.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MN.jpg"></p><blockquote><p><em>MN.jpg</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac + Hexo + GitHub 创建个人博客</title>
      <link href="/2017/06/25/Mac-hexo-github-%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/06/25/Mac-hexo-github-%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前浏览过很多人的博客,感觉十分酷炫.</p><span id="more"></span><p>之后就搜集很多搭建的资料(其实就是别人发的博客),存到印象笔记里去.然而过了很久一直畏难没有实施😂.<br>某日心血来潮忽然特别想搞出来,就跟着别人的脚步,一个坑一个坑的踩过来了.</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.Ruby<br>2.Node<br>3.Hexo<br>4.GitHub帐号</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>1.<br>Mac系统自带Ruby,so忽略</p><p>2.<br>Node<br>用homebrew安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>3.<br>Hexo<br>可以使用nodejs自带的 npm 进行安装.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>4.<br>GitHub<br>4.1<br>申请GitHub帐号<br>4.2<br>在自己的GitHub主页右上角,创建一个新的repository.我的GitHub账号是<code>rensss</code>,<br>那么我创建的repository名字就应该为<code>rensss.github.io</code></p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><h4 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h4><p>1.<br>在Mac上找一个地方新建一个文件夹存放你的站点.例如我在<code>/Users/&lt;UserName&gt;/Documents</code>下新建的文件夹hexo.具体路径是 <code>/Users/&lt;UserName&gt;/Documents/hexo</code><br>2.<br>初始化hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/&lt;UserName&gt;/Documents/hexo</span><br><span class="line">hexo init       #初始化</span><br><span class="line">npm install     #npm初始化 </span><br></pre></td></tr></table></figure><p>3.<br>本地预览</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean      #清理缓存</span><br><span class="line">hexo generate   #编译</span><br><span class="line">hexo server     #开启服务</span><br></pre></td></tr></table></figure><p>之后,本地访问<code>0.0.0.0:4000</code>就可以看到hexo的欢迎界面了✌️</p><h4 id="上传git"><a href="#上传git" class="headerlink" title="上传git"></a>上传git</h4><p>1.<br>改写<code>_config.yml</code>文件末尾的<code>deploy:</code>标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">  repository: https://github.com/rensss/rensss.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>2.<br>安装<code>hexo-deployer-git</code> git上传用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.<br>先编译再上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>如果无报错,之后等一段时间,就可以访问你的博客了!<br>ps:这段时间可能非常长!!!</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>中间踩坑不断,欲哭无泪,各种谷歌/百度.<br>At the end. 我终于搞出来了!</p><blockquote><p>ps:可能遇到的问题</p><ol><li>hexo 安装失败<br>npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules<br>npm ERR! code EACCES<br>npm ERR! syscall access<br>npm ERR! path /usr/local/lib/node_modules<br>npm ERR! errno -13<br><img src="https://i.loli.net/2020/12/30/sSreygUFGJDtxdQ.png" alt="npm install -g hexo.png"><br>解决方案： 修改权限</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $USER /usr/local/lib/node_modules</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过添加手势的方法处理CALayer的点击事件</title>
      <link href="/2016/02/04/%E9%80%9A%E8%BF%87%E6%B7%BB%E5%8A%A0%E6%89%8B%E5%8A%BF%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%84%E7%90%86CALayer%E7%9A%84%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
      <url>/2016/02/04/%E9%80%9A%E8%BF%87%E6%B7%BB%E5%8A%A0%E6%89%8B%E5%8A%BF%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%84%E7%90%86CALayer%E7%9A%84%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>当给UIView添加Animation动画时，项目需要添加点击事件。<span id="more"></span><br>但是使用UIButton无效，不响应点击事件。<br>baidu / google 之。<br>发现UILayer不响应事件。<br>换一种思路，发现可以给整个视图添加点击手势，然后判断点击位置来触发事件。</p><h5 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  //创建手势添加到视图上</span><br><span class="line">  self.tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(click:)];</span><br><span class="line">  [self.view addGestureRecognizer:self.tapGesture];</span><br><span class="line">  </span><br><span class="line">#pragma mark - 点击</span><br><span class="line">  </span><br><span class="line">  /** 点击事件*/</span><br><span class="line">  -(void)click:(UITapGestureRecognizer *)tapGesture &#123;</span><br><span class="line">  </span><br><span class="line">      CGPoint touchPoint = [tapGesture locationInView:self];</span><br><span class="line">      //遍历当前视图上的子视图的presentationLayer 与点击的点是否有交集</span><br><span class="line">      for (UIView *subView in self.view.subviews) &#123;</span><br><span class="line">          if ([subView.layer.presentationLayer hitTest:touchPoint]) &#123;</span><br><span class="line">              NSLog(@&quot;点击的是：%@&quot;,subView);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="打完收工"><a href="#打完收工" class="headerlink" title="打完收工"></a>打完收工</h5>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CALayer </tag>
            
            <tag> UITapGestureRecognizer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
